#include <iostream>

using namespace std;

class Node {
public:
    int key;
    int data;
    Node* next;

    Node(){
        key = 0;
        data =0;
        next = NULL;
    }
    Node(int k,int d){
        key = k;
        data =d;
        next = NULL;
    }

};

class SinglyLinkedList{
public:
    Node* head;

    SinglyLinkedList(){
        head = NULL;
    }
    SinglyLinkedList(Node *n){
        head = n;
    }

    // (1) Check if Node exists using key value
    Node* nodeExixts(int k){
        Node* temp = NULL;
        Node* ptr = head;
        while(ptr != temp){
            if(ptr->key == k){
                temp = ptr;
            }
            ptr = ptr->next;
        }
        return temp;
    }

    // (2) Append a node to the list
    void appendNode(Node* n){
        if(nodeExixts(n->key) != NULL){
            cout << "Node already exits, try to append at another Key Value" << endl;
        }
        else {
            Node* ptr = head;
            while(ptr->next != NULL){
                ptr = ptr->next;
            }
            ptr->next = n;
            cout << "Node Appended" << endl;
        }
    }

    // (3) Prepend at the begineing
    void prependNode(Node* n){
        if(nodeExixts(n->key)!=NULL){
            cout << "Node already exits, try to append at another Key Value" << endl;
        }
        else {
            n->next = head;
            head = n;
            cout << "Node prepended" << endl;
        }
    }

    // (4) Insert a node after a particular node in the list
    void insertNodeAfter(int k, Node* n){
        Node* ptr = nodeExixts(n->key);
            if(ptr == NULL){
                cout << "No key exists with that key value " << endl;
            }
            else {
                if(nodeExixts(n->key)!=NULL){
                    cout << "Node already exits, try to append at another Key Value" << endl;
                }
                else{
                    n->next = ptr->next;
                    ptr->next = n;
                    cout << "Head Inserted" << endl;
            }
        }
    }

    //DELETE Node by unique Key
    void deleteNodeByKey(int k){
        if(head == NULL){
            cout << "List is empty" << endl;
        }
        else{
            if(head->key == k){
                head = head->next;
                cout << "First Node unlinked" << endl;
            }
            else {
                Node* temp = NULL;
                Node* preptr = head;
                Node* currentptr = head->next;
                while(currentptr != NULL){
                    if(currentptr->key == k){
                        temp = currentptr;
                        currentptr= NULL;
                    }
                    else {
                        preptr = preptr->next;
                        currentptr = currentptr->next;
                    }
                }
                if(temp != NULL){
                    preptr->next = temp->next;
                    cout << "Node Deleted" << endl;
                }
                else{
                    cout << "No such Node exists with that key value" << endl;
                }
            }
        }
    }

    // Update Node
    void updateNodeByKey(int k, int d){
        Node* ptr = nodeExixts(k);
        if(ptr != NULL){
            ptr->data = d;
            cout << "Data Updated Succesfully" << endl;
        }
        else {
            cout << "Node Dosent Exists with that key" << endl;
        }
    }

    // Printing
    void printList(){
        if(head == NULL){
            cout << "No Node in LinkedList" << endl;
        }
        else{
            cout << "Linked List is --->" << endl;
            Node* temp = head;
            while(temp != NULL){
                cout << "( " <<temp->key << ", " << temp->data << " )" << "-->";
                temp = temp->next;
            }
        }
    }

};

int main()
{
    SinglyLinkedList s;
      int option;
      int key1, k1, data1;
      do {
        cout << "\nWhat operation do you want to perform? Select Option number. Enter 0 to exit." << endl;
        cout << "1. appendNode()" << endl;
        cout << "2. prependNode()" << endl;
        cout << "3. insertNodeAfter()" << endl;
        cout << "4. deleteNodeByKey()" << endl;
        cout << "5. updateNodeByKey()" << endl;
        cout << "6. print()" << endl;
        cout << "7. Clear Screen" << endl << endl;

        cin >> option;
        Node * n1 = new Node();
        //Node n1;

        switch (option) {
        case 0:
          break;
        case 1:
          cout << "Append Node Operation \nEnter key & data of the Node to be Appended" << endl;
          cin >> key1;
          cin >> data1;
          n1 -> key = key1;
          n1 -> data = data1;
          s.appendNode(n1);
          //cout<<n1.key<<" = "<<n1.data<<endl;
          break;

        case 2:
          cout << "Prepend Node Operation \nEnter key & data of the Node to be Prepended" << endl;
          cin >> key1;
          cin >> data1;
          n1 -> key = key1;
          n1 -> data = data1;
          s.prependNode(n1);
          break;

        case 3:
          cout << "Insert Node After Operation \nEnter key of existing Node after which you want to Insert this New node: " << endl;
          cin >> k1;
          cout << "Enter key & data of the New Node first: " << endl;
          cin >> key1;
          cin >> data1;
          n1 -> key = key1;
          n1 -> data = data1;

          s.insertNodeAfter(k1, n1);
          break;

        case 4:

          cout << "Delete Node By Key Operation - \nEnter key of the Node to be deleted: " << endl;
          cin >> k1;
          s.deleteNodeByKey(k1);

          break;
        case 5:
          cout << "Update Node By Key Operation - \nEnter key & NEW data to be updated" << endl;
          cin >> key1;
          cin >> data1;
          s.updateNodeByKey(key1, data1);

          break;
        case 6:
          s.printList();

          break;
        case 7:
          cout << "cls";
          break;
        default:
          cout << "Enter Proper Option number " << endl;
        }

      } while (option != 0);

      return 0;
}
